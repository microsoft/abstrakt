trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: GoTool@0
  displayName: 'Using Go v1.12'
  inputs:
    version: '1.12'

- task: Go@0
  displayName: 'Resolving Dependencies'
  inputs:
    arguments: '-d'
    workingDirectory: '$(System.DefaultWorkingDirectory)'

- task: Go@0
  displayName: 'Install Test Dependencies'
  inputs:
    command: 'get'
    arguments: 'github.com/jstemmer/go-junit-report github.com/axw/gocov/gocov github.com/AlekSi/gocov-xml golang.org/x/tools/cmd/cover'

- task: Go@0
  displayName: 'Building Abstrakt'
  inputs:
    command: build
    arguments: '-o "$(Build.Repository.Name)"'
    workingDirectory: '$(System.DefaultWorkingDirectory)'

- task: Bash@3
  displayName: 'Run Unit Tests'
  inputs:
    filePath: '$(Build.Repository.LocalPath)/.azure/test.sh'

- task: PublishTestResults@2
  displayName: 'test cluster'
  inputs:
    testRunner: JUnit
    testResultsFiles: $(System.DefaultWorkingDirectory)/**/report.xml
    failTaskOnFailedTests: true

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura 
    summaryFileLocation: $(System.DefaultWorkingDirectory)/**/coverage.xml
    reportDirectory: $(System.DefaultWorkingDirectory)/**/coverage
    failIfCoverageEmpty: true

- task: ArchiveFiles@2
  displayName: 'Archive Files'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    rootFolderOrFile: '$(Build.Repository.LocalPath)/$(Build.Repository.Name)'
    includeRootFolder: false

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    artifactName: drop